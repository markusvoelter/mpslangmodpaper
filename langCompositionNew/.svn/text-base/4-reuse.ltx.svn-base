
\subsection{Language Reuse} 

Language reuse (\fig{langReuse}) enables \emph{homogenous} fragments with
\emph{independent} languages. Given are two independent languages $l_2$ and
$l_1$ and two fragment $f_2$ and $f_1$. $f_2$ depends on $f_1$, so that
\begin{align}
\exists r \in \mathit{Refs_{f_2}} \mid \; &\mathit{fo(r.from)} = 
		f_2\; \wedge \nonumber \\ 
	&\mathit{fo(r.to)} = (f_1 \vee f_2)
\end{align}
Since $l_2$ is independent, it cannot directly reference concepts in $l_1$. This
makes $l_2$ reusable with different languages, in contrast to language
referencing, where concepts in $l_2$ reference concepts in $l_1$. We call $l_2$
the \emph{context} language and $l_1$ the \emph{reused} language.

One way of realizing dependent fragments while retaining independent languages
is using an adapter language (cf. the Adapter pattern) $l_A$ where $l_A$
\emph{extends} $l_2$ and
\begin{align}
\exists r \in \mathit{Refs_{l_A}} \mid \mathit{lo(r.from)} =
l_A\; \wedge \;\mathit{lo(r.to)} = l_1
\end{align}    
One could argue that in this case reuse is just a clever combination of
referencing and extension. While this is true from an implementation
perspective, it is worth describing as a separate approach, because it enables
the combination of two \emph{independent languages} by adding an
adapter \emph{after the fact}, so no pre-planning during the design of $l_1$ and
$l_2$ is necessary.
           
\begin{figure}[h]
\begin{center}
  \includegraphics[width=6cm]{figures/langReuse.png} 
  \caption[labelInTOC]{Reuse: $l_1$ and $l_2$ are independent languages. Within
  an $l_2$ fragment, we still want to be able to reference concepts in another
  fragment expressed with $l_1$. To do this, an adapter language $l_A$ is
  added that depends on both $l_1$ and $l_2$, using inheritance and
  referencing to adapt $l_1$ to $l_2$.} 
  \label{langReuse}  
\end{center} 
\end{figure} 
           
                              
\subsubsection{Use Cases and Examples}

Language referencing supports reuse of the referenced language.
Language reuse supports the reuse of the \emph{referencing}
language as well. Consider as examples a language for describing user
interfaces. It provides language concepts for various widgets, layout definition
and disable/enable strategies. It also supports data binding, where
data structures are associated with widgets, to enable two-way
synchronization between the UI and the data. Using language reuse,
the same UI language can be used with different data description languages. 
Referencing is not enough because the UI language would have a direct
dependency on a particular data description language. Changing the dependency
direction to $data \rightarrow ui$ doesn't solve the problem either, because
this would go against the model-view-controller pattern, which states that the
UI may have dependencies to the data, but not vice versa.

Generally, the referencing language is built with the knowledge that it will be
reused with other languages, so hooks may be provided for adapter languages
to plug in. The UI language thus may define an abstract concept
\verb#DataMapping# which is then extended by various adapter languages.



                                     