This paper presents a classification of approaches for language modularization,
reuse and composition. We identify four different approaches: referencing,
extension, reuse and embedding. They differ regarding the dependencies between
the participating languages and whether they require syntactic composition or
not. For each of the four approaches, the paper presents a formal definition,
usage scenarios and examples, implementation challenges regarding syntax,
type systems, transformations and IDE support, as well as an overview over how
three different DSL tools (SDF/Spoofax, MPS and Xtext) support these approaches.
Decent support for language modularization and composition allows for
programming environments where languages addressing different concerns of
a system can be flexible combined into a very effective integrated
development environment for a specific class of software systems.
