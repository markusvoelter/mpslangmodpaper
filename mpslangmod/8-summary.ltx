


\section{Summary}
\label{Summary}

MPS is powerful environment for language engineering, in particular where
modular language and IDE composition is concerned. We have seen in this paper
how the challenges of composing the concrete syntax are solved by MPS and how it
is also capable of addressing modularity and composition of type systems and
generators. Code completion, syntax highlighting and error marks for composed
languages are essentially free in MPS. The major drawback of MPS is its
non-trivial learning curve. Because it works so differently than traditional
language engineering environments, and because it addresses so many aspects of
languages (incl. type systems, data flow and refactorings) mastering the tool
takes a significant investment in terms of time: experience shows that ca. 4
weeks are necessary. I hope that in the future this investment will be reduced
by better documentation and better defaults, to keep simple things simple and
complex things tractable. There are initial ideas on how this could be done.