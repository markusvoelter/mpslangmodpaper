
\vspace{-5mm}
\mvsubsec{Language Embedding}
\label{Embedding}


Language Embedding enables \emph{heterogeneous} fragments with
\emph{independent} languages. It is similar to Reuse in that there are two
independent languages $l_1$ and $l_2$, but instead of establishing references
between two homogeneous fragments, we now \emph{embed} instances of concepts
from $l_2$ in a fragment $f$ expressed with $l_1$, so
\begin{align} 
\forall c \in \mathit{Cdn_f} \mid  \;
	&\mathit{lo(co(c.parent))} = l_1 \; \wedge \nonumber \\
	( &\mathit{lo(co(c.child))} = l_1 \vee \mathit{lo(co(c.child))} = l_2) )
\end{align}
Unlike language Extension, where $l_2$ depends on $l_1$ because concepts in
$l_2$ extend concepts in $l_1$, there is no such dependency in this case. Both
languages are independent. We call $l_2$ the \emph{embedded} language and $l_1$
the \emph{host} language. Again, an adapter language can be used to achieve this. 
However, in this case concepts in $l_A$ don't just
reference concepts from $l_1$. Instead, they contain them (similar to
\fig{langReuse}, but with a containment link between $B5$ and $A3$).

As an example we embed an existing \ic{expressions} language into the
\ic{uispec} language without modifying either the
\ic{uispec} language or the expression language, since, in case of Embedding, none of them
may have a dependency on the other. Below is an example program using the
resulting language that uses expressions after the \ic{validate} keyword:

\pagebreak[4]

\begin{code}
form CompanyStructure                                                                                                                                  
  uses Department                                                                                                                                      
  uses Employee                                                                                                                                        
                                                                                                                                                       
  field Name: textfield(30) -> Employee.name validate lengthOf(Employee.name) < 30                                                                     
  field Role: combobox(Boss, TeamMember) -> Employee.role                                                                                              
  field Freelancer: checkbox -> Employee.freelancer 
        validate if (isSet(Employee.worksAt)) Employee.freelancer == true else
                    Employee.freelancer == false 
  field Office: textfield(20) -> Department.description                                                                                                
\end{code}


\phead{Structure and Syntax} We create a new language \ic{uispec\_validation}
that extends \ic{uispec} and also extends \ic{expressions}. \fig{uival} shows the
structure. To be able to use the expressions, the user has to instantiate a
\ic{ValidatedField} instead of a \ic{Field}. \ic{ValidatedField} is also defined
in \ic{uispec\_validation} and is a subconcept of \ic{Field}.


\begin{figure}[htp]
\begin{center}
  \includegraphics[scale=0.70]{figures/uival2.png}
  \caption[labelInTOC]{The \ic{uispec\_validation} language defines a subtype of
  \ic{uispec.Field} that contains an \ic{Expression} from a reusable \ic{expressions}
  language. The language also defines a couple of additional expressions,
  including the \ic{AttributeRefExpr}, which can be used to refer to
  attributes of entities.}
  \vspace{-3mm}
  \label{uival}  
\end{center}
\end{figure}

To support the migration of existing models that use \ic{Field} instances, we
provide an intention. An Intention (known as a Quick Fix in Eclipse) is an
in-place model transformation that can be triggered by the user by selecting it
from the Intentions menu accessible via \ic{Alt-Enter}. This particular
intention is defined for a \ic{Field}, so the user can press \ic{Alt-Enter} on a
\ic{Field} and select \ic{Add Validation}\footnote{We could alternatively also
implement a way for people to just type \ic{validate} on the right side of a
field to trigger this transformation}. This transforms an existing \ic{Field}
into a \ic{ValidatedField}, so that a validation expression can be entered. The
core of the Intention is the following script, which performs the actual
transformation:

\begin{code}
execute(editorContext, node)->void { 
    node<ValidatedField> vf = new node<ValidatedField>(); 
    vf.widget = node.widget; 
    vf.attribute = node.attribute; 
    vf.label = node.label; 
    node.replace with(vf); 
}
\end{code}

\pagebreak[4]

\noindent As mentioned, the \ic{uispec\_validation} language extends the
\ic{uispec} and \ic{expressions} languages. \ic{ValidatedField} has a property \ic{expr} that
contains the actual \ic{Expression}. As a consequence of polymorphism, we can
use any existing subconcept of \ic{Expression} defined in the \ic{expressions}
language here. So without doing anything else, we could write \ic{20 + 40 > 10},
since integer literals and the \ic{+} operator are defined as part of the
embedded \ic{expressions} language. However, to write anything useful, we have to be
able to reference entity attributes from within expressions. To achieve this, we create
the \ic{AttributeRefExpr} as shown in \fig{uival}. We also create
\ic{LengthOfExpr} and \ic{IsSetExpression} as further examples of how to adapt
an embedded language to its new context (the \ic{uispec} and \ic{entities}
languages in the example). The following is the structure definition of the
\ic{LengthOfExpr}.

\begin{code}
concept LengthOfExpr extends Expression        
  properties:                                  
    alias = lengthOf                                    
  children:                                     
    Expression  expr  1 
\end{code}                                               

\noindent Note how it defines an \ic{alias}. The \ic{alias} is used to pick the
concept from the code completion menu. If the user is in expression context, he must
type the \ic{alias} of a concept to pick it from the code completion menu.
Typically, the alias is similar to the leading keyword of the
concept's CS. The \ic{LengthOfExpr} is projected as \ic{lengthOf(something)}, so
by choosing the alias to also be \ic{lengthOf}, the concept can be entered
naturally.


The \ic{AttributeRefExpr} references entity attributes. However, it may only
reference attributes of entities that are used in the \ic{Form} within
which we define the validation expression. The code below defines the necessary
scoping rule:

\begin{code}
(model, scope, referenceNode, enclosingNode) -> sequence<node< >> { 
  nlist<Attribute> res = new nlist<Attribute>; 
  node<Form> form = enclosingNode.ancestor<Form>; 
  for (node<EntityReference> er : form.usedEntities) { 
    res.addAll(er.entity.attributes); 
  } 
  return res; 
}
\end{code}

\noindent Notice that the actual syntactic embedding of the expressions in the
\ic{uispec\_ validation} language is not a problem because of how projectional
editors work. No ambiguities may arise. We simply add a child of type
\ic{Expression} to the \ic{ValidatedField} concept.


\phead{Type System} Primitive types such as \ic{int} and \ic{string} are defined
in the \ic{entities} language \emph{and} in the reusable expression language.
Although they have the same names, they are not the same concepts, so the two
sets of types must be mapped. For example, the type of the \ic{IsSetExpression}
is \ic{expressions.BooleanType} so it fits in with the \ic{expressions}
language. The type of the \ic{LengthOfExpr}, which takes an
\ic{AttrRefExpression} as its argument, is \ic{expressions.IntType}. The type of
an attribute reference is the type of the attribute's \ic{type} property, as in
\ic{typeof(attrRef) :==: typeof( attrRef.attr.type)}.
However, consider the following code:

\begin{code}
field Freelancer: checkbox -> Employee.freelancer 
      validate if (isSet(Employee.worksAt)) 
               then Employee.freelancer == false 
               else Employee.freelancer == true 
\end{code}

\noindent This code states that if the \ic{worksAt} attribute of an employee is
set, then its \ic{freelancer} attribute must be \ic{false} else it must be
\ic{true}. It uses the \ic{==} operator from the \ic{expressions} language.
However, that operator expects two \ic{expressions.BooleanType} arguments, but
the type of the \ic{Employee.freelancer} is \ic{entities.BooleanType}. In
effect, we have to override the typing rules for the \ic{expressions} language's
\ic{==} operator. In the expressions language, we define overloaded operation
rules. We specify the resulting type for an \ic{EqualsExpression} depending on
its argument types. Below is the code in the expressions language that defines
the resulting type to be \ic{boolean} if the two arguments are
\ic{expressions.BooleanType}:

\begin{code}
operation concepts: EqualsExpression                                                     
  left operand type: new node<BooleanType>() 
  right operand type: new node<BooleanType>() 
  operation type: (operation, leftOperandType, rightOperandType)->node< > { 
    new node<BooleanType>; 
  }               
\end{code}

\noindent This overloaded operation specification is integrated with the
inference-based typing rules using the following code: 

\begin{code}
rule typeof_BinaryExpression for BinaryExpression as binExpr {                                                                                                                                                                                                                                                                                                                                                                                                                   
  node<> opType = operation type( binExpr , left , right ); 
  if (opType != null) { 
    typeof(binExpr) :==: opType; 
  } else { 
    error "operator " + binExpr.concept.name + " cannot be applied to operands "
          + left.concept.name + "/" + right.concept.name -> binExpr; 
  } 
} 
\end{code}

\noindent To override these typing rules to work with \ic{entities.BooleanType},
we simply provider another overloaded operation specification in the
\ic{uispec\_validation} language:

\begin{code}
operation concepts: EqualsExpression                                       
  one operand type: new node<BooleanType> // this is the entities.BooleanType!     
  operation type: (operation, leftOperandType, rightOperandType)->node< > { 
    node<BooleanType>;  // this is the expressions.BooleanType 
  } 
\end{code}

\pagebreak[4]

\phead{Generator} For the generator we can use the following two alternative
approaches. We can use the \ic{expressions} language's existing to-text
generator and wrap the expressions in some kind of \ic{TextWrapperStatement}.
A wrapper is necessary because we cannot simply embed text in BaseLanguage ---
this would not work structurally. Alternatively, we can write a (reusable)
transformation from \ic{expressions} to BaseLanguage; these rules would be used
as part of the transformation of \ic{uispec\_validation} code to BaseLanguage.
Since many DSLs will map code to BaseLangauge, it is worth the effort to write a
reusable generator from \ic{expressions} to BaseLanguage expressions. We choose
this second alternative.

The actual expressions defined in the \ic{expressions} language and those of
BaseLanguage are almost identical, so this generator is trivial. We create a new
language project \ic{expressions.blgen} and add reduction rules.
\fig{expr2blgen} shows some of these reduction rules.


\begin{figure}[htp]
\begin{center} 
  \vspace{-3mm}
  \includegraphics[width=120mm]{figures/expr2blgen.png}
  \caption[labelInTOC]{A number of reduction rules that map the reusable
  \ic{expressions} language to BaseLanguage (Java). Since the languages are very
  similar, the mapping is trivial. For example, a \ic{PlusExpression} is mapped
  to a \ic{+} in Java, the left and right arguments are reduced recursively through
  the \ic{COPY\_SRC} macro.}
  \label{expr2blgen}  
  \vspace{-5mm}
\end{center} 
\end{figure} 

We also need reduction rules for the new expressions added in the
\ic{uispec\_ validation} language (\ic{AttrRefExpression}, \ic{isSetExpression},
\ic{LengthOf-} \\ \ic{Expr}). Those rules are defined in
\ic{uispec\_validation}.
As an example, \fig{reductionAttributeRef} shows the rule for handling the
\ic{AttrRefExpression}. The validation code itself is "injected" into the UI
form via the same placeholder reduction as in the case of the
\ic{rbac\_entities} language.


\begin{figure}[htp]
\begin{center}
  \includegraphics[width=120mm]{figures/reductionAttributeRef.png}
  \caption[labelInTOC]{References to entity attributes are mapped to a call to
  their getter method. The template fragment (inside the \ic{<TF .. TF>}) uses
  reference macros (->\$) to "rewire" the reference to the Java Bean instance, and
  the \ic{toString} method call to a call to the getter.}
  \label{reductionAttributeRef}  
  \vspace{-4mm}
\end{center}
\end{figure}
 
 
Just as in the discussion on Extension (\sect{Extension}), we may want to use
constraints to restrict the embedded language in the context of a
\ic{ValidatedField}. Consider the case where we wanted to embed the expressions
part of C instead of the \ic{expressions} language. C comes with all kinds of
operators relating to pointers, bit shifting and other C-specifics that are not
relevant in the validation of UI fields. In this case we may want to use a
\ic{can be ancestor} constraint to restrict the use of those operators in the
validation expressions.

\vspace{-5mm}
As a consequence of MPS' projectional editor, no ambiguities may arise if
multiple independent languages are embedded (the same discussion applied to the
case where a base language is extended with \emph{several independently
developed extensions} at the same time). Let us consider the potential cases:

\begin{description}
  \item[Same Concpet Name:] Embedded languages may define concepts with the same
  name as the host language. This will not lead to ambiguity because concepts
  have a unqiue ID  as well. A program element will use this ID to refer to the
  concept whose instance it represents.
  \item[Same Concrete Syntax:] The projected representation of a concept is not
  relevant to the functioning of the editor. The program would still be
  unambiguous to MPS even if \emph{all elements had the same notation}. Of
  course it would be confusing to the users (users can always see
  the qualified name of the instantiated concept in the Inspector as a means of
  disambiguation).
  \item[Same Alias:] If two concepts that are valid at the same location use the
  same alias, then, as the user types the alias, it is not clear which of the
  two concepts should be instantiated. This problem is solved by MPS opening the
  code completion window and requiring the user to explicitly select which
  alternative to choose. Once the user has made the decision, the unique ID is
  used to create an unambiguous program tree. 
\end{description}





