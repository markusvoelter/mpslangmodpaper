
\mvsubsec{Language Reuse} 

Language Reuse enables \emph{homogenous} fragments with
\emph{independent} languages. Given are two independent languages $l_2$ and
$l_1$ and two fragment $f_2$ and $f_1$. $f_2$ depends on $f_1$, so that
\begin{align}
\exists r \in \mathit{Refs_{f_2}} \mid \; &\mathit{fo(r.from)} = 
		f_2\; \wedge \nonumber \\ 
	&(\mathit{fo(r.to)} = f_1 \vee \mathit{fo(r.to)} = f_2)
\end{align}
Since $l_2$ is independent, its concepts cannot directly reference concepts in
$l_1$. This makes $l_2$ reusable with different languages, in contrast to language
Referencing, where concepts in $l_2$ reference concepts in $l_1$. We call $l_2$
the \emph{context} language and $l_1$ the \emph{reused} language.

A way of realizing dependent fragments with independent languages is
using an adapter language $l_A$ (cf. \cite{GOF95}) that contains concepts that
\emph{extend} concepts in $l_2$ and \emph{references} concepts in $l_1$
(\fig{langReuse}). One could argue that in this case Reuse is just a 
combination of Referencing and Extension. This is true from an
implementation perspective, but it is worth describing as a separate approach
because it enables the combination of two \emph{independent languages} with
an adapter \emph{after the fact}, so no pre-planning during the design of $l_1$
and $l_2$ is necessary.
           
\begin{figure}[h]
\begin{center}
  \vspace{-2mm}  
  \includegraphics[width=6cm]{figures/langReuse.png} 
  \caption[labelInTOC]{Reuse: $l_1$ and $l_2$ are independent languages. Within
  an $l_2$ fragment, we still want to be able to reference concepts in a
  fragment expressed with $l_1$. To do this, an adapter language $l_A$ is
  added that uses Extension and Referencing to adapt $l_1$ to $l_2$.} 
  \label{langReuse}
  \vspace{-6mm}  
\end{center} 
\end{figure} 

\noindent Reuse covers the case where a language has been developed
independent of its reuse context. The respective
fragments remain homogeneous. We cover two alternative cases: in the
first one (a persistence mapping language) the generated code is
separate from the code generated from the \ic{entities} language. The second
one (a language for role-based access control) describes the case where the
generated code has to be "woven into" the \ic{entities} code.

\vspace{-4mm}  


\subsubsection{Separated Generated Code}

\ic{relmapping} is a reusable language for mapping arbitrary data to relational
tables. It supports the definition of relational table structures, but leaves
the actual mapping to the source data unspecified. When the language is adapted
to a specific context, this one mapping has to be provided. The left
side if the code below shows the reusable part. A database is defined
that contains tables with columns. Columns have (database-specific) data types.
On the right side we show the database definition code when it is reused with
the \ic{entities} language; each column is mapped to an entity attribute.

\vspace{-2mm}

\begin{code}
Database CompanyDB                          Database CompanyDB             
  table Departments                           table Departments   
    number id                                   number id <- Department.id  
    char descr                                  char descr <-Department.description 
  table People                                table People    
    number id                                   number id <- Employee.id 
    char name                                   char name <- Employee.name
    char role                                   char role <- Employee.role  
    char isFreelancer                           char isFreelancer <- Employee.freelancer
\end{code}

                        
\phead{Structure and Syntax} \fig{relmapping} shows the structure of the
\ic{relmapping} language. The abstract concept \ic{ColumnMapper} serves as a
hook: if we reuse this language in a different context, we extend this hook in a
context-specific way.

\begin{figure}[htp]
\begin{center}
  \includegraphics[scale=0.7]{figures/relmapping2.png}
  \caption[labelInTOC]{A \ic{Database} contains \ic{Tables} which contain
  \ic{Columns}. A column has a name and a type. A column also has a
  \ic{ColumnMapper}. This is an abstract concept that determines where the
  column gets its data from. It is a hook intended to be specialized in
  sublanguages, specific to the particular Reuse context.}
  \label{relmapping} 
  \vspace{-5mm}
\end{center}
\end{figure}

 
\noindent The \ic{relmapping\_entities} language extends \ic{relmapping} and
adapts it for reuse with the \ic{entities} language. To this end, it provides a subconcept
of \ic{ColumnMapper}, the \ic{AttributeColMapper}, which references an
\ic{Attribute} from the \ic{entities} language as a means of expressing the mapping from the
attribute to the column. The \ic{relmapping} language projects the column
mapper --- and its context-specific sub-concepts --- on the right of the
field definition, resulting in heterogeneous fragments.



\phead{Type System} The type of a column is the type of its \ic{type} property.
In addition, the type of the column must also conform to the type of the column
mapper, so the concrete subtype must provide a type mapping as well. This
"typing hook" is implemented as an abstract behaviour method \ic{typeMappedToDB}
on the \ic{ColumnMapper}. The typing rules then look as follows:


\begin{code}
typeof(column)       :==: typeof(column.type);
typeof(column.type)  :==: typeof(column.mapper);
typeof(columnMapper) :==: columnMapper.typeMappedToDB();
\end{code}

\noindent The \ic{AttributeColMapping} concept implements this method by mapping
\ic{Int- Type} to \ic{NumberType}, and everything else to \ic{CharType}:

\begin{code}
public node<> typeMappedToDB() overrides ColumnMapper.typeMappedToDB {                                                                          
  node<> attrType = this.attribute.type.type; 
  if (attrType.isInstanceOf(IntType)) { return new node<NumberType>(); } 
  return new node<CharType>();
}                                                                                                                                                  
\end{code}



\phead{Generator} The generated code is also separated into a reusable base
class generated by the generator of the \ic{relmapping} language and a
context-specific subclass, generated by 
\ic{relmapping\_entities}. The generic base class contains code for
creating the tables and for storing data in those tables. It contains abstract
methods for accessing the data to be stored in the columns.
The dependency structure of the generated fragments, as well as the dependencies of
the respective generators, resembles the dependency structure of the languages:
the generated fragments are dependent, and the generators are dependent as well
(they share the name and implicitly the knowledge about the structure of the
class generated by the reusable \ic{relmapping} generator). 


\begin{code}
public abstract class CompanyDBBaseAdapter {

  private void createTableDepartments() { // SQL to create the Departments table }
  private void createTablePeople() { // SQL to create the People table }

  public void storeDepartments(Object applicationData) {
    Insert i = new Insert("Departments");
    i.add( "id", getValueForDepartments_id(applicationData));
    i.add( "descr", getValueForDepartments_descr(applicationData));
    i.execute();
  }

  public void storePeople(Object applicationData) { // like above }
  public abstract String getValueForDepartments_id(Object applicationData);
  public abstract String getValueForDepartments_descr(Object applicationData);
  // abstract getValue methods for the People table
}
\end{code}

\noindent The subclass generated by the generator (shown below) in the
\ic{relmapping\_ entities} language implements the abstract methods defined by
the generic superclass. The interface, represented by the \ic{applicationData}
object, has to be generic so any kind of user data can be passed in. Note
how this class references the Beans generated from the \ic{entities}.

\begin{code}
public class CompanyDBAdapter extends CompanyDBBaseAdapter {
  public String getValueForDepartments_id(Object applicationData) {
    Object[] arr = (Object[]) applicationData;
    Department o = (Department) arr[0];
    return o.getId();
  }
  public String getValueForDepartments_descr(Object applicationData) {
    Object[] arr = (Object[]) applicationData;
    Department o = (Department) arr[0];
    return o.getDescription();
} }
\end{code}
 
 
\subsubsection{Interwoven generated code}

\ic{rbac} is a language for specifying role-based access
control for \ic{entities}. The code below shows an example fragment. Note how it
references entities (\ic{Department}) and attributes (\ic{Employee.name}) from
an \ic{entities} fragment.

\begin{code}
users: user mv : Markus Voelter     
       user ag : Andreas Graf       
       user ke : Kurt Ebert         
                               
roles: role admin : ke              
       role consulting : ag, mv     
                               
permissions:   admin, W : Department        
               consulting, R : Employee.name
\end{code}

\vspace{-2mm}
\phead{Structure and Syntax} The structure is shown in \fig{rbac}. Like
\ic{relmapping}, \ic{rbac} provides a hook \ic{Resource} to adapt it to context
languages. The sub-language \ic{rbac\_entities} provides two sub-concepts of
\ic{Resource}, namely \ic{At- tributeResource} to reference to an
\ic{Attribute}, and \ic{EntityResource} to refer to an \ic{Entity}, to define permissions for
entities and their attributes.


\begin{figure}[htp]
\begin{center}
  \includegraphics[scale=0.7]{figures/rbac2.png}
  \caption[labelInTOC]{Language structure of the \ic{rbac} language. An \ic{RBACSpec}
  contains \ic{Users}, \ic{Roles} and \ic{Permissions}. Users can be members 
  in several roles. A permission assigns a role and right (read, write) to a
  \ic{Resource} (such as an \ic{Entity} or an \ic{Attribute}).}
  \label{rbac}  
  \vspace{-6mm}
\end{center}
\end{figure}


\phead{Type System} No type system rules apply here, because none of the
concepts added by the \ic{rbac} language are typed or require constraints
regarding the types in the \ic{entities} language.

\phead{Generator} What distinguishes this case from the \ic{relmapping} case is that
the code generated from the \ic{rbac\_entities} language is \emph{not} separated from
the code generated from the \ic{entities} (we cannot use the convenient
base class/subclass approach). Instead, a permission check is required \emph{inside}
the setters of the Java Beans. Here is some example code:
\vspace{-2mm}


\begin{code}
public void setName(String newValue) {
  if (new RbacSpecEntities().hasWritePermission("Employee.name")) {  // check permission 
    throw new RuntimeException("no permission");                     // from rbac_entities 
  }                                                                  // language 
  this.name = newValue;
}
\end{code}

\noindent The generated fragment is homogeneous (it is all Java code), but it is
\emph{multi-sourced}, since several generators contribute to the same fragment.
To implement this, several approaches are possible:

 
\begin{itemize}
  \item We could use AspectJ\footnote{http://www.eclipse.org/aspectj/}. This
  way, we could generate separate Java artifacts (all single-sourced) and then use the aspect weaver to "mix" them.
  While this would be a simple approach in terms of MPS (because we only
  generate singled-sourced artifacts), it fails to illustrate advanced MPS
  generator concepts. So we do not use this approach here.
  \item An interceptor framework (see the Interceptor pattern in~\cite{POSA})
  could be added to the generated Java Beans, with the generated
  code contributing specific interceptors (effectively building a custom aspect
  oriented programming (AOP) solution). We will not use this approach either,
  for the same reason we do not use AspectJ in this paper.
  \item We could "inject" additional code generation templates to the existing
  \ic{enti- ties} generator from the \ic{rbac\_entities} generator. This would
  make the generators \emph{woven} as opposed to just dependent. However, weaving
  generators in MPS is not supported, so we cannot use this approach. 
  \item We could define a hook in the generated Java beans code and then have
  the \ic{rbac\_entities} generator contribute code to this hook. This is the
  approach we will use. The generators remain dependent because they share
  knowledge about the way the hook works.
\end{itemize}



\noindent Notice that only the AspectJ solution would work \emph{without any
pre-planning} from the perspective of the \ic{entities} language, because it
avoids mixing the generated code artifacts (it is handled by
AspectJ). All other solutions require the original \ic{entities} generator to
"expect" extensions. In our case we have modified the \ic{entities} generator to
generate a \ic{PlaceholderStatement} (\fig{placeholder}) into the setters. The
placeholder acts as a hook at which subsequent generators can add statements.
While we have to pre-plan \emph{that} we want to extend the generator in this
location, we do not have to predefine \emph{how}.
 

\begin{figure}[htp] 
\begin{center}
  \vspace{-2mm}
  \includegraphics[scale=0.55]{figures/placeholder.png}
  \caption[labelInTOC]{This generator fragment creates a setter method for each
  attribute of an \ic{Entity}. The \ic{LOOP} iterates over all Attributes. The \ic{\$} macro
  computes the name of the method, and the \ic{COPY\_SRC} macro on the argument type
  computes the type. The placeholder is used later to insert the
  permission check.}
  \label{placeholder}
  \vspace{-5mm}  
\end{center}
\end{figure}

\noindent The \ic{rbac\_entities} generator contains a reduction rule for
\ic{PlaceholderState- ment}s. If the generator encounters a placeholder (that
has been put there by the \ic{entities} generator) it replaces it with code that checks for the
permission (\fig{placeholderreduction}). To make this work we have to specify in
the generator priorities that this generator runs
\ic{strictly after} the \ic{entities} generator (since the \ic{entities}
generator has to create the placeholder before it can be replaced) and
\ic{strictly before} the BaseLanguage generator (which transforms BaseLanguage
code into Java text for compilation). Priorities specify a partial ordering (cf.
the \ic{strictly before} and \ic{strictly after}) on generators and can be set
in a generator properties dialog. Note that specifying the priorities does not
introduce additional language dependencies, modularity is retained.


 
\begin{figure}[htp] 
\begin{center}
  \vspace{-3mm}
  \includegraphics[width=120mm]{figures/placeholderreduction.png}
  \caption[labelInTOC]{This reduction rule replaces \ic{PlaceholderStatement}s
  with a permission check. Using the condition, we only match those
  placeholders whose identifier is \ic{pre-set} (notice how we have defined
  this identifier in the template shown in \fig{placeholder}). The inserted code
  queries another generated class that contains the actual permission check. A runtime
  exception is thrown if the permission check fails.}
  \label{placeholderreduction}  
  \vspace{-3mm}
\end{center}
\end{figure}


