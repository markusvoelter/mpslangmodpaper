

\mvsubsec{Language Referencing}

Language Referencing enables \emph{homogeneous} fragments with cross-references
among them, using \emph{dependent} languages (\fig{langReferencing}).
 
\begin{figure}[h]
\begin{center}
  \vspace{-2mm}  
  \includegraphics[width=8.2cm]{figures/langReferencing.png} 
  \caption[labelInTOC]{Referencing: Language $l_2$ depends on $l_1$, because
  concepts in $l_2$ reference concepts in $l_1$. (We
  use rectangles for languages, circles for language concepts, and UML
  syntax for the lines: dotted = dependency, arrows = associations,
  hollow-triangle-arrow for inheritance.)} 
  \label{langReferencing}
  \vspace{-4mm}  
\end{center} 
\end{figure}  
 
\noindent A fragment $f_2$ depends on $f_1$. $f_2$ and $f_1$ are expressed with
languages $l_2$ and $l_1$, respectively. We call $l_2$ the \emph{referencing} language,
and $l_1$ the \emph{referenced} language. The referencing language $l_2$ depends on the
referenced language $l_1$ because at least one concept in the $l_2$ references a
concept from $l_1$.  While equations (2) and (3) (from \sect{terminology})
continue to hold, (1) does not. Instead
\begin{align}
\forall r \in \mathit{Refs_{l_2}} \mid   
   \mathit{lo(r.from)} = l_2\; \wedge \; (\mathit{lo(r.to)} = l_1 \vee 
   \mathit{lo(r.to)} = l_2)
\end{align}

\noindent From a CS perspective, such a reference is a simple identifier,
(possibly with dots). This terminal can easily be redefined in the referencing
language and does not require reusing and embedding non-terminals from the
referenced language. Hence no syntactic composition is required in this case.


As an example, for Referencing we define a language \ic{uispec} for defining UI
forms for \ic{entities}. Below is an example. This is a \emph{homogeneous}
fragment, expressed only in the \ic{uispec} language. Only the identifiers of
the referenced elements (such as \ic{Employee.name}) have been added to the
referencing language as discussed in the previous paragraph. However, the
fragment is \emph{dependent}, since it references elements from another fragment
(expressed in the \ic{entities} language). 

\begin{lstlisting}[language=mpsmodex, deletekeywords={role}, morekeywords={}]
form CompanyStructure                                                                                                                                  
  uses Department                                                                                                                                      
  uses Employee                                                                                                                                        
  field Name: textfield(30) -> Employee.name                                                                      
  field Role: combobox(Boss, TeamMember) -> Employee.role                                                                                              
  field Freelancer: checkbox -> Employee.freelancer
  field Office: textfield(20) -> Department.description                                                                                                
\end{lstlisting}

\begin{figure}[htp]
\begin{center}
  \includegraphics[scale=0.7]{figures/uispec2.png}
  \caption[labelInTOC]{The abstract syntax of the \ic{uispec} language. Dotted
  boxes represent classes from another language (here: the \ic{entities}
  language). A \ic{Form} contains \ic{EntityReference}s that connect to an \ic{entities} model. A
  \ic{Form} also contains \ic{Field}s, each referencing an \ic{Attribute} from
  an \ic{Entity} and containing a \ic{Widget}.}
  \label{uispec} 
  \vspace{-7mm}
\end{center}
\end{figure}

\phead{Structure and Syntax} The AS for the \ic{uispec} language is shown in
\fig{uispec}. The \ic{uispec} language extends\footnote{MPS uses the term
"extension" whenever the definition of one language uses or refers to concepts
defined in another language. This is not necessarily an example of language
Extension as defined in this paper.} the \ic{entities} language. This means that
concepts from the \ic{entities} language can be used in the definition of the
\ic{uispec} language. A \ic{Form} owns a number of \ic{EntityReferences}, which
in turn reference an \ic{Entity}. Below is the definition of the \ic{Field}
concept. It has a \ic{label} property, owns a \ic{Widget} and refers to the
\ic{Attribute} it edits.

\vspace{-1mm}
 
\begin{lstlisting}[language=mps, deletekeywords={label}, morekeywords={}]
concept Field extends BaseConcept               
  properties:                                 
    label : string                              
  children:                                   
    Widget     widget     1      
  references:                                 
    Attribute  attribute  1
\end{lstlisting}


\noindent Note that there is no composition of concrete syntax, since the
programs written in the two composed languages remain separated into their own fragments. 
No ambiguities or clashes between names of concepts may occur in this case.


\phead{Type System} There are limitations regarding which widget can be used
with which attribute type. The typing rule below implements these checks and is
defined in the \ic{uispec} language. It references types from the \ic{entities}
language.  We use a \ic{checking rule} to illustrate how constraints can be
written that do not use the inference engine introduced earlier.

\begin{lstlisting}[language=mps, deletekeywords={can, be}, morekeywords={}]
checking rule checkTypes for Field as field {     
  node<Widget> w = field.widget; 
  node<Type> t = field.attribute.type;                                                                                                                                                                                                                                                                                                       
  if (w.isInstanceOf(CheckBoxWidget) && !(t.isInstanceOf(BooleanType))) { 
    error "checkbox can only be used with booleans" -> w; 
  } 
  if (w.isInstanceOf(ComboWidget) && !(t.isInstanceOf(StringType))) { 
    error "combobox can only be used with strings" -> w; 
} }
\end{lstlisting}

\vspace{-3mm}
\phead{Generator} The defining characteristic of Referencing is that the two
languages only \emph{reference} each other, and the instance fragments are
dependent, but homogeneous. No syntactic integration is necessary. In this
example, the generated code exhibits the same separation. From a \ic{Form} we
generate a Java class that uses Java Swing to render the UI.
It \emph{uses} the Beans generated from the \ic{entities}: they are
instantiated, and the setters are called. The generators are separate but they
are \emph{dependent}, since the \ic{uispec} generator knows about the names of
the generated Java Beans, as well as the names of the setters and getters.
This dependency is realized by defining a set of behaviour methods on the
\ic{Attribute} concept that are called from both generators (the colon
in the code below represents the node cast operator and binds tightly; the code
casts the \ic{Attribute}'s parent to \ic{Entity} and then accesses the \ic{name} property).


\begin{lstlisting}[language=mps, deletekeywords={set}, morekeywords={}]
concept behavior Attribute {                                                 
  public string qname() { this.parent : Entity.name + "." + this.name; }                                                                          
  public string setterName() { "set" + this.name.toFirstUpper(); }                                                                          
  public string getterName() { "get" + this.name.toFirstUpper(); }                                                                          
}                                                                            
\end{lstlisting}


