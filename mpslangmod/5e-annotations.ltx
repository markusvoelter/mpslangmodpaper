
\vspace{-2mm}
\mvsubsec{Language Annotations}
\label{annotations}
\vspace{-1mm}

In a projectional editor, the CS of a program is projected from the AST. A
projectional system always goes from AS to CS, never from CS to AS (as parsers
do). This has the important consequence that the CS does not have to contain all
the data necessary to build the AST (which in case of parsers, is necessary).
This has two consequences:

\begin{itemize}
  \item A projection may be \emph{partial}. The AS may contain
  data that is not shown in the CS. The information may, for example, only be
  changeable via intentions (see \sect{Embedding}), or the projection
  rule may project some parts of the program only in some cases, controlled by some kind
  of configuration.
  \item It is also possible to project \emph{additional} CS that is
  not part of the CS definition of the original language. Since the
  CS is never used as the information source, such additional
  syntax does not confuse the tool (in a parser-based tool the grammar would
  have to be changed to take into account this additional syntax to not derail
  the parser).
\end{itemize}

\todo{In the embedding case, discuss annotations as an example of E. without
adapter lang}

\noindent In this section we discuss the second alternative. It represents a
variant of Embedding: no dependencies, but syntactic composition. The mechanism
MPS uses for this is called annotations. We have seen annotations when we
introduced templates (\sect{entitiesLanguage}): an annotation can be attached to
arbitrary program elements and can be shown together with CS of the annotated
element. In this section we use this approach to implement an alternative
approach for the entity-to-database mapping. Using this approach, we can store
the mapping from entity attributes to database columns directly in the
\ic{Entity}, resulting in the following code:


\begin{code}
module company                                 
  entity Employee {                            
    id : int -> People.id                      
    name : string -> People.name               
    role : string -> People.role               
    worksAt : Department -> People.departmentID        
    freelancer : boolean -> People.isFreelancer
  }                                            
                                            
  entity Department {                          
    id : int -> Departments.id                 
    description : string -> Departments.descr  
  }                                            
\end{code}


\noindent This is a heterogeneous fragment, consisting of code from
\ic{entities}, as well as the annotations (e.g. \ic{-> People.id}). From a CS perspective, the column
mapping is embedded in the \ic{Entity}. In the AST the mapping information is
also actually stored in the \ic{entities} model. However, the definition of the
\ic{entities} language does not know that this additional information is stored
and projected "inside" entities. The \ic{entities} language is not modified.


\phead{Structure and Syntax} We define an additional language 
\ic{relmapping\_anno- tations} which extends the \ic{entities}
language as well as the \ic{relmapping} language. In this language we define the
following concept:

\begin{code}
concept AttrToColMapping extends NodeAnnotation  
  references:                               
    Column column 1       
  properties: 
    role = colMapping
  concept links:
    annotated = Attribute
\end{code}                                            

\noindent \ic{AttrToColMapping} concept extends \ic{NodeAnnotation}, a concept
predefined by MPS. Concepts that extend \ic{NodeAnnotation} have to provide a
\ic{role} property and an \ic{annotated} concept link.
As we have said above, structurally, an annotation is a child of the node it
annotates. So the \ic{Attribute} has a new child of type \ic{AttrToColMapping},
and the reference that contains the child is called \ic{@colMapping} --- the
value of the \ic{role} property prepended with \ic{@}. The \ic{annotated}
concept link points to the concept \emph{to which this annotation can be added}. \ic{AttrToColMapping}s can
be annotated to instances of \ic{Attribute}.

While structurally the annotation is a child of the annotated node, the
relationship is reversed in the CS: The editor for \ic{AttrToColMapping} wraps
the editor for \ic{Attribute}, as \fig{annotationeditor} shows. Since the
annotation is not part of the original language, it cannot just be "typed
in", instead it must be attached to nodes via an Intention.


\begin{figure}[htp]
\begin{center}
  \vspace{-3mm}
  \includegraphics[scale=0.55]{figures/annotationeditor.png}
  \caption[labelInTOC]{The editor for the \ic{AttrToColMapping} embeds the
  editor of the concept it is annotated to (using the \ic{attributed node}
  cell). It then projects the reference to the referenced column. This way the
  editor of the annotation has control of if and how the editor of the annotated
  element is projected.}
  \label{annotationeditor}  
  \vspace{-4mm}
\end{center}
\end{figure}

\todo{review}
\noindent It is possible to define the annotation target to be
\ic{BaseConcept}, which means the annotation can be attached to \emph{any}
program element. This is useful for generic metadata such as documentation,
requirements traces or presence conditions in product line engineering (we
describe this in~\cite{VoelterVisser2011} and~\cite{Voelter2010}). MPS' template
language uses this approach as well. Note that this is a way to support
Embedding generically, \emph{without} use of an adapter language. The reason why
this generic approach is useful mostly for metadata is related to semantics.
Since the annotations can be composed \emph{with any other language} without an
adapter, the semantics must be generic as well, i.e. not related to any
particular target language. This is true for the generic metadata mentioned
above.

 

\phead{Type System} The same typing rules are necessary as in 
\ic{relmapping\_enti- ties} described previously. They reside in
\ic{relmapping\_annotations}.

\phead{Generator} The generator is also similar to one for \ic{relmapping\_entities}. It takes the \ic{entities} model as the input, and then
uses the column mappings in the annotations to create the entity-to-database
mapping code.

