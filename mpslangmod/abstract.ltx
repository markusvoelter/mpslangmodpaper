\begin{abstract}
Language and IDE modularization and composition is an important
building block for working efficiently with DSLs. Historically, this has been a challenge
because many grammar formalisms are not closed under composition, hence
syntactic composition of languages is challenging. Composing static and dynamic
semantics can also be hard, at least in the general case. Finally, a lot of
existing work does not consider IDEs for the composed and extended languages. In
this paper, I will show how the projectional language workbench JetBrains MPS
solves most of these issues. The main part of the
paper is a set of extensive examples that show the various kinds of extension and
modularization. The last section contains an evaluation that identifies the
strong and weak aspects of modularization, composition and extension in MPS, and
suggests a couple of improvements.
\keywords{DSLs \and language composition \and language extension \and JetBrains
MPS \and Language Workbench}
% \PACS{PACS code1 \and PACS code2 \and more}
% \subclass{MSC code1 \and MSC code2 \and more}
\end{abstract}