
\vspace{-3mm}
\section{Implementing a DSL with MPS}
\label{entitiesLanguage}
\vspace{-2mm}

This section illustrates the definition of a language with MPS. Like
other language workbenches, MPS comes with a set of DSLs for language
definition, a separate DSL for each language aspect such as structure, editor,
type systems, generators as well as things like quick fixes or refactorings. MPS
is bootstrapped, so these DSLs are built (and can be extended) with MPS itself.


We illustrate language definition with MPS based on a simple \ic{entities}
language. Example code is shown below. \emph{Modules} are root nodes that
live as top-level elements in \emph{models}. According to the terminology
introduced in \sect{terminology} root nodes (and their descendants) are
considered \emph{fragments}.


\begin{lstlisting}[language=mpsmodex, deletekeywords={role}]
module company                       // continued...
  entity Employee {                  entity Department {  
    id : int                           id : int      
    name : string                      description : string
    role : string                    } 
    worksAt : Department
    freelancer : boolean
  }                     
\end{lstlisting}





\vspace{-2mm}
\phead{Structure and Syntax} Language definition starts with the AS, referred to
as \emph{structure} in MPS. \fig{entities} shows a UML diagram of the \ic{entities}
language AS. The following code shows the definition of the \ic{Entity}
concept\footnote{In addition to \ic{properties}, \ic{children} and
\ic{references}, concept definitions can have more characteristics such as
\ic{concept properties} or \ic{concepts links}. However, these are not needed
for this example, so we do not show them here. The code above shows all the
characteristics used in this example}. \ic{Entity} extends \ic{BaseConcept}, the
top-level concept similar to \ic{java.lang.Object} in Java. It implements the
\ic{INamedConcept} interface to inherit a \ic{name} property. It declares a list
of children of type \ic{Attribute} in the \ic{attributes} role.
A concept may also have references to other concepts (as opposed to children).


\begin{lstlisting}[language=mps, deletekeywords={}, morekeywords={is}]
concept Entity extends BaseConcept implements INamedConcept        
  is root: true
  children:                                     
    Attribute attributes 0..n
\end{lstlisting}

\begin{figure}[h]
\begin{center}
  \includegraphics[scale=0.7]{figures/entities2.png}
  \caption[labelInTOC]{The abstract syntax of the entities language. An \ic{Entity}
  has \ic{Attribute}s which have a \ic{Type} and a \ic{name}. \ic{EntityType}
  extends \ic{Type} and references \ic{Entity}. This adapts entities to types 
  (cf. the Adapter pattern~\cite{GOF95}). Concepts like \ic{EntityType} which
  have exactly one reference are called smart references and are treated specially
  by MPS: instead of proposing to explicitly instantiate the
  reference concept and then selecting the target, the code completion menu shows 
  \emph{the possible targets} of the reference directly. The reference concept
  is implicitly instantiated once a target is selected.}
  \vspace{-4mm}
  \label{entities} 
\end{center}
\end{figure}


\noindent Editors in MPS are based on cells. Cells are the smallest unit
relevant for projection. Consequently, defining an editor consists of arranging cells
and defining their content. Different cell types are available.
\fig{editordefinition} explains the editor for \ic{Entity}. The editors for the
other concepts are defined similarly.



\begin{figure}[htp]
\begin{center}
  \vspace{-4mm}
  \includegraphics[scale=0.55]{figures/editordefinition.png}
  \caption[labelInTOC]{The editor for \ic{Entity}. The outermost cell is a
  vertical list \ic{[/ .. /]}. In the first line, we use a horizontal list
  \ic{[> .. <]} that contains the keyword \ic{entity}, the \ic{name} property
  and an opening curly brace. In the second line we use indentation \ic{--->}
  and a vertical arrangements of the contents of the \ic{attributes} collection
  \ic{(> .. <)}. Finally, the third line contains the closing curly brace.}
  \vspace{-4mm}
  \label{editordefinition} 
\end{center}
\end{figure}

\phead{Type System} As we have explained in \sect{HowMPSWorks}, language
developers specify typing rules for language concepts. To calculate and check
types for a program, MPS "instantiates" these rules for each instance of the
concept, resulting in a set of type equations for a program. These equations
contain type values (such as \ic{int}) as well as type variables (for program
elements whose type has not yet been calculated). MPS' then solves the set of
type equations, trying to assign type values to the type variables in a way such
that all the equations for a program are free of contradictions. If a
contradiction arises, this is flagged as a typing error. For the \ic{entities}
language, we specify two simple typing rules. The first one specifies the type
of a \ic{Type} (it answers the questions of what the type system's type of
should be for e.g. \ic{int} if it is used in an attribute such as \ic{int
age;}):

\begin{lstlisting}[language=mps, deletekeywords={}, morekeywords={}]
rule typeof_Type for Type as t { 
    typeof(t) :==: t.copy; }                                       
\end{lstlisting}

\noindent This rule has the name \ic{typeof\_Type} and applies to the language
concept \ic{Type} (\ic{int} or \ic{string} are subconcepts of the abstract
\ic{Type} concept). The \ic{typeof(...)} operator creates a type variable
associated with a program element, in this case, with an instance \ic{t} of
\ic{Type}. We calculate that type by cloning \ic{t} itself. In other words, if
the type system engine needs to find out the type of an \ic{int} program
element, that type is \ic{int} as well. This may be a bit confusing, because
instances of \ic{Type} (and its subconcepts) play two roles. First, they are
part of the program itself if they are explicitly specified in attributes
(\ic{int age;}). Second, they are also the objects with which the type system
engine works. By cloning the program element, we express that types represent
themselves in the type system engine (we need a clone since for technical
reasons we cannot return the program element itself). Another typing rule
defines the type of the \ic{Attribute} as a whole to be the type of the
attribute's \ic{type} property:

\begin{lstlisting}[language=mps, deletekeywords={}, morekeywords={}]
rule typeof_Attribute for Attribute as a {
    typeof(a) :==: typeof(a.type); }                                      
\end{lstlisting}

\noindent This rule answers the question of what the type system engine's type
should be for instances of \ic{Attribute}. Note how this equation has two type variables
and no type values. It simply propagates the type of the attribute's specified
type (the \ic{int} in \ic{int age;}) to be the type of the overall attribute.
Note how the two typing rules discussed in this section play together to
calculate the type of the \ic{Attribute} from the type specified by the user: 
First we calculate the type of the specified type (a clone of itself) and then
we propagate this type to the type of the whole attribute. 

There is one more rule we have to define. It is not strictly part of the type
calculation. It is a constraint that checks the uniqueness of attribute names
for any given \ic{Entity}:

\begin{lstlisting}[language=mps, deletekeywords={}, morekeywords={}]
checking rule check_Entity for Entity as e {
     set<string> names = new hashset<string>;
     foreach a in e.attributes {
         if (names.contains(a.name)) {
             error "duplicate attribute name" -> a;
         }
         names.add(a.name);
     }                                                                                                                                                                                                                                                                                                        
}
\end{lstlisting}

\noindent This rule does \emph{not} establish typing equations, it just checks a
property of the program (note the \emph{checking} in the rule header). It checks
attribute name uniqueness based on a set of the names. It reports an error if it
finds a duplicate. It annotates the error with the attribute \ic{a}, so the
editor can highlight the respective program element. Note how in case of the
typing rules shown above we don't have to perform the check and report an error
ourselves. This is done implicitly by the type system engine.



\phead{Generator} From \ic{entities} models we generate Java Beans. Since Java
is available in MPS (called the BaseLanguage), the generation is actually a
model-to-model transformation: from the \ic{entities} model we generate a Java
model. MPS supports several kinds of transformations. The default case is the
template-based transformation which maps ASTs onto other ASTs. Alternatively,
one can use an API to manually construct the target tree. Finally, the
\ic{textgen} DSL is available to generate ASCII text (at the end of the
transformation chain). Throughout this paper we use the template-based approach.

MPS templates look like text generation templates known from tools such as
Xpand\footnote{http://www.eclipse.org/modeling/m2t/?project=xpand},
Jet\footnote{http://www.eclipse.org/modeling/m2t/?project=jet} or
StringTemplate\footnote{http://www.stringtemplate.org/} since they use the CS of
the target language in the template. However, that CS is projected like any
other program, and the IDE can provide support for the target language \emph{in
the template} (we discuss details on support for the target language in
templates in Related Work, \sect{Related}). This also means that the
\emph{template code itself} must be valid in terms of the target language.

Template-based generators consist of mapping configurations and templates.
Mapping configurations define which elements are processed by which templates.
For the \ic{entities} language, we need a root mapping rule and reduction rules.
\emph{Root mapping rules} create new root nodes from existing root nodes (they a
fragment to another fragment). In our case we generate a Java class from an
\ic{Entity}. \emph{Reduction rules} are in-place transformations. Whenever the
engine encounters an instance of the specified source concept somewhere in a
model, it replaces the element with the result of the associated template. In
our case we reduce the various types (\ic{int}, \ic{string}, etc.) to their Java
counterparts. \fig{entitiesmc} shows a part of the \ic{entities} mapping configuration.

\vspace{-2mm}
\begin{figure}[htp]
\begin{center}
  \includegraphics[width=80mm]{figures/entitiesmc.png}
  \caption[labelInTOC]{The mapping configuration for the \ic{entities} language. The
  root mapping rule for \ic{Entity} specifies that instances of \ic{Entity} should
  be transformed with the \ic{map\_Entity} template (which produces a Java
  class and is shown in \fig{entitytemplate}). The reduction rules use inline
  templates, i.e. the template is embedded in the mapping configuration. For example, the 
  \ic{IntType} is replaced with the Java \ic{int} and the \ic{EntityRefType} is
  reduced to a reference to the class generated from the target entity. The
  \ic{->\$} is a so-called reference macro. It contains code (not
  shown) that "rewires" the reference (that points to the 
  \ic{Double} class \emph{in the template code}) to a reference to the class
  generated from the target entity. }
  \vspace{-6mm}
  \label{entitiesmc} 
\end{center}
\end{figure}




\noindent \fig{entitytemplate} shows the \ic{map\_Entity} template. It generates
a complete Java class from an input \ic{Entity}. To understand how templates
work in MPS we discuss in more detail the generation of Java fields for each
\ic{Entity} \ic{Attribute}:

\begin{itemize}
  \item Developers first write structurally correct example code in the
  target language. To generate a field into a class for each
  \ic{Attribute} of an \ic{Entity}, one would first add a field to a
  class (see \ic{aField} in \fig{entitytemplate}).
 
  \item Then macros are attached to
  those program elements in the example code that have to be replaced with
  elements from the input model during the transformation.
  In the \ic{Attribute} example in \fig{entitytemplate} we first
  attach a \ic{LOOP} macro to the whole field. It contains an expression
  \ic{node.attributes;} where \ic{node} refers to the input \ic{Entity} (this
  code is entered in the Inspector window and is not shown in the screenshot).
  This expression returns the set of \ic{Attribute}s from the current
  \ic{Entity}, making the \ic{LOOP} iterate over all attributes of the
  entity and create a field for each of them. 
  
  \item At this point, each created field would be \emph{identical} to the
  example code to which we attached the \ic{LOOP} macro (\ic{private int
  aField;}). To make the generated field specific to the particular
  \ic{Attribute} we iterate over, we use more macros. A \ic{COPY\_SRC} macro is
  used to transform the \ic{type}. \ic{COPY\_SRC} copies the input node (the
  inspector specifies the current attribute's \ic{type} as the input here) and
  applies reduction rules (those defined in \fig{entitiesmc}) to map types from
  the \ic{entities} language to Java types. We then use a property macro (the
  \ic{\$} sign around \ic{aField}) to change the \ic{name} property of the field
  we generate to the name of the \ic{Attribute} we currently transform.
  
\end{itemize}

\vspace{-2mm}
\begin{figure}[htp]
\begin{center}
  \includegraphics[width=100mm]{figures/entitytemplate.png}
  \caption[labelInTOC]{The template for creating a Java class from an
  \ic{Entity}. The generated class contains a field, a getter and a setter for
  each of the \ic{Attribute}s of the \ic{Entity}. The running text explains the
  details.}
  \label{entitytemplate} 
\end{center}
\end{figure}


\noindent Instead of mixing template code and target language code (and
separating them with some kind of escape character) we annotate macros to
regular, valid target language code. Macros can be attached to
arbitrary program elements. This way, the target language code in templates
\emph{is always structurally correct}, but it can still be annotated to control
the transformation. Annotations are a generic MPS mechanism not specific to
transformation macros and are discussed in \sect{annotations}.

 

