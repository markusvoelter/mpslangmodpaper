---------------------- REVIEW 2 ---------------------
PAPER: 2
TITLE: Language and IDE Mo dularization, Extension and Comp osition with MPS
AUTHORS: Markus Voelter

The paper discusses MPS. The topic in itself is very interesting, MPS seems to be a powerful system.
In that sense it is a valuable contribution to the GTTSE body of knowledge. However, my main concern
with this paper is that it gives the impression of being written in a hurry and thus
at quite a number of places it is sloppy. 

-> As I have discussed in the cover letter, I really considered it to be a draft in the
   true sense of the word. I was not aware that this version would be the one to be reviewed.
   I am sorry for the misunderstanding. These problems have been fixed now.

Furthermore, the scientific contribution of this paper is thin.
It quite a number of places claims are made, for instance on typing, that are not well motivated or
references to related work are missing.  

-> See my remarks in the cover letter on "academic-vs-tutorial". I have made things much more
   precise, added a lot of conceptual stuff and expanded the related work

The paper takes the reader through a number of tricks to
get things done. This means what will be valid of the work presented here in a few years time.
These aspects have to be improved in order to make the paper acceptable for publication.

-> I think there are three contributions (in the revised version):
   1) classification of modualrization approaches
   2) example with MPS, showing its power
   3) implicitly via 2 showing the benefits of projectional editing in the
      context of language composition.
      
   1) is not tool specific. 2) obviously is. 3) is specific to projectional editors,
   which means that it is relevant beyond only MPS. 
   
   However, generally I was invited to write a tutorial on MPS. So this paper will
   always be specific to MPS to some extent.  

Detailed remarks:
- The paper starts with discussing the structure of the paper. I would rather see a proper discussion
  of the underlying philosophy of MPS. 
  
  -> I have completely rewritten the intro. It now contains a brief overview over MPS'
     philosophy. Also, in the "How MPS works" I have highlighted the most important characterstics
      of MPS' philosophy.
  
  Next to that a discussion of alternative approaches. 
  
  -> I have moved the alternative approaches back into the related work section.
  
  The way the paper is presented now is a kind of sophisticated user manual. 
  
  -> yes. See my discussion "academic-vs-tutorial" in teh cover letter. I think
     I have changed this quite a bit.
  
  The introduction is in my opinion messy, it discusses the structure of the paper 
  (which actually tries to give some of the philosophy).
  
  -> changed.
  
  Example code, with a strange remark on not have been able to test the code! 
  
  -> I don't understand this comment.
  
  Type of modularization, which is interesting but actually not well worked out. 
  
  -> I have elaborated on this in the intro, in the classification section, and,
     via the formulae, in each of the sections for the various composition techniques.
     I think it is a lot clearer now.
  
  Why do we actually want DSLs, etc. are not discussed at all.
  
  -> I have added a little bit about this to the intro. In general, however, I don't
     think I have enough space in this paper to introduce the whole notion of why 
     DSLs are useful.
  
  * The remark on "modular type systems" (page 2) should be supported by a reference, it is unclear
     whether it is meant in a general setting or MPS specific.
     
     -> I have removed this statement at this place and explained it in 
        more detail at another location. FYI, it was meant to be MPS-specific.
     
  * The remark on MPS2.0 is weak!
  
    -> I don't know which remark you are referring to. 
  
  * What is the Liskov substitution principle, please add reference.
  
    -> done.
  
  * Why only extension, I think that retraction is an issue as well.
 
    -> Agree. The paper already contains an example of restriction (in the section
       on embedding). In the intro, I have added the following paragraph:
       
       The [Mernik Paper] also discusses restriction of languages. In
       the context of the classification proposed in this paper, restriction is a form
       of extension in the following sense: to restrict a language, we
       develop an extension that prohibits the use of some language concepts 
       in certain contexts. We discuss this in ... 
       
- Section 2 discusses the workings of MPS. This section suffers from the fact that it is a kind of
  company advertisement. 
  
  
  -> It is not an advertisement. It explains how the tool works from
     the perspective of somebody who
     a) is convinced the MPS is a good tool, and 
     b) is not affiliated with JetBrains!
  
     To my knowledge there is no other projectional editor on the market that even closely
     resembles what MPS can do, with the exception of the Intentional Domain Workbench, which
     is not accessible. So it is hard to compare MPS to other, *similar* tools.  
  
  	 However, as you and the other reviewers suggested, I have added a lot
  	 of additional related work in general.
  
  A number of claims are made that are not supported by or related to work of others.
  
  -> many of these things aren't claims, they are just facts about how MPS works. 
     Unfortunately, there aren't many other publications (academic or otherwise) about
     MPS, so it is hard to cite others to substantiate some of the claims. 
  
  The combination of textual and graphical syntax can also be achieved in alternative ways, see [EB2010].
  
  -> todo
  
  * Last paragraph (page 6, before section 2.3), please look into the work on SmartTools [PCDFPFHA2002],
     or the ALOE of GANDALF [MF81].
    
  -> todo   
    
  * In the discussion on web development (page 6) I would expect a reference to the work on WebDSL.
  
  -> this is not intended as a discussion of Web-DSLs. I could reference all kinds of 
     DSLs that address web development. This is intended as an example of what MPS can do,
     so I don't think it makes sense to reference all kinds of other DSLs that relate
     to web development.
  
  * Please add a reference to "hampering developer productivity" (bottom page 6).
  
  -> todo
  
  * Please add to the bullet on SQL (page 7) a reference to work performed by Ralf 
    Laemmel and Erik Meijer.
  
  -> todo
  
  * In the part on "dnq" please add a reference to the recent 
    work on Rascal by Jurgen Vinju and Paul Klint.
    
  -> todo
    
- Section 3 discusses related approaches. Unfortunately, some work on earlier and related language workbenches is
  is missing.
  * SmartTools is closer related than Xtext.
  * The sentence "Code completion for references ... out of the box." is too cryptic to be understandable,
     furthermore, I think this is a too positive view on the tooling.
  * SDF is not developed in Delft, it is maintained there, it is the result of more than 20 years research at the
    University of Amsterdam and CWI. Spoofax is just one of the SDF implementations, if you mention Spoofax
    why not mention the ASF+SDF Meta-Environment as well.
- Section 4 discusses the implementation of a DSL using MPS. Is the DSL used a real DSL? It looks more like
  an data type.
   * There is a unresolved reference "the DSL design paper". Furthermore, given the fact that this is a tutorial
      paper, self-containedness is appreciated. So, please elaborate on the terminology.
   * "Language definition" -> "Defining a language"
   * On page 12, the type rules for the entities language are introduced, this is a very concise description.
     Explain why this is enough to catch the type errors.
  * On page 13, after figure 4, you mention Xpand, Jet and StringTemplate, please add references.
  * The sentence "Developers first write ... we generate." is incomprehensible.
  * The next part lacks abstraction and is a bulk of details, why do I need to read this? What is the point you
    are trying to make. The paper suffers at more places at this point. A lot of details are given without
    describing on a more abstract level what you are solving.
  * The sentence "So instances of the types ... configuration." is grammatically wrong and hard to understand therefore.
- Section 5 describes the various ways of implementing language extensions. This section suffers from a proper
  introduction and setting of the scope. A bulk of implementation details are given. I fail to get the point. Are you
  trying to solve the same problem in different ways, are you showing all features of MPS? I would expect that each
  section draws some conclusions/lessons learnt.
- Section 6 presents an evaluation and Section 7 a summary. I miss an evaluation of the drawbacks of MPS. The fact
  that is a "closed" system. It has no real mechanisms for importing or exporting, but maybe it is so perfect that this
  is not necessary.
- Please check references a number of them are incomplete, eg. [10].


[EB2010] Engelen, L.J.P. & Brand, M.G.J. van den (2010). Integrating textual and graphical modelling languages.
In T. Ekman & J. Vinju (Eds.), Proceedings of the 9th Workshop on Language Descriptions, Tools and Applications,
LDTA 2009, York, UK, March 28-29, 2009). (Electronic Notes in Theoretical Computer Science, Vol. 253(7), pp. 105-120).
[PCDFPFHA2002] Didier Parigot, Carine Courbis, Pascal Degenne, Alexandre Fau, Claude Pasquier, JoÃ«l Fillon,
Christophe Held, Isabelle Attali: Aspect and XML-oriented Semantic Framework Generator: SmartTools.
Electr. Notes Theor. Comput. Sci. 65(3): 97-116 (2002)
[MF1981] Raul Medina-Mora, Peter H. Feiler: An Incremental Programming Environment.
IEEE Trans. Software Eng. 7(5): 472-482 (1981)