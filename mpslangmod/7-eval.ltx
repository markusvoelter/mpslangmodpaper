
\section{Discussion}
\label{Eval}

\subsection{Limitations}

The paper has drawn a very positive picture about the capabilities of MPS
regarding \lmrc. However, there are some limitations and shortcomings in the
system. Most of them are not conceptual problems, but just missing features.
However, it is clearly evident that MPS has been developed over a long time,
different problems have been solved in different ways, as the problem arose,
instead of implementing a consistent, unified approach. I propose such an
approach in \sect{facets}.

\phead{Syntax} The previous examples show that meaningful \lmrc is possible with
MPS. Specifically, reuse and embedding of languages is possible. The challenge
of grammar composition is not an issue in MPS, since no grammars and parsers are
used. The fact that we hardly ever discuss syntactic issues in the above
discussions is testament to this. Potential ambiguities are resolved by the user
as he enter the program (discussed at the end of \sect{embedding}) --- once
entered, a program is always unambiguous. The luxury of not running into
syntactic composition issues comes at the price of the projectional editor and
the XML-based storage (we have discussed the drawbacks of projectional editors
in \sect{HowMPSWorks}). One particular shortcoming of MPS is that it is not
possible to override the projection rule of a concept in a sublanguage (this
feature is on the roadmap for MPS 3.0). If this were possible, ambiguities
\emph{for the user} in terms of the concrete syntax could be solved by changing
the notation (or color or font) of existing concepts if they are used together
with a particular other language.

\todo{clean up the bibliography. Also capitalization}

\phead{IDE} This paper emphasizes IDE composition in addition to language
composition. Regarding syntax highlighting, code completion, error marks on the
program and intentions, all the composition approaches \emph{automatically}
compose those IDE aspects. No additional work is necessary by the languge
developer. However, there are additional concerns an IDE may address including
version control ingegration, profiling and debugging. Regarding version control
integration, MPS provides diff/merge for most of today's version control systems
on the level of the projected syntax --- including for heterogeneous fragments.
No support for profiling is provided. MPS comes with a debug framework that lets
language developers create debuggers for their languages. However, this
framework is relatively low-level and does not provide specific support for language
composition and heterogeneous fragments. However, as part of the mbeddr project
that develops an extensible version of the C programming language
(\cite{Voelter2012}) we have developed a framework for extensible C debuggers. Developers of C
extensions can easily define the how the extension integrates into the C
debugger so that debugging on the \emph{syntax of the extension} becomes
possible for heterogeneous fragments. Visser et al. also describe debuggers for
DSLs in \cite{Lindeman-GPCE-2011}.


\todo{Do I reference sugarJ?}

\phead{Evolution} Composing languages leads to coupling. In the case of
referencing and extension the coupling is direct, in the case of reuse and
embedding the coupling is indirect via the adapter language. As a consequence of
a change of the referenced/base/context/host language, the
referencing/extensio/reused/embedded language may have to change as well. MPS,
at this time, provides no automatic way of versioning and migrating languages,
so co-evoluation has to be performed manually. In particular, a process
discipline must be established in which dependent languages are migrated to new
versions of a changed language. 
  \todo{Reviewer says that this has worked in LISA 10 years ago. Check!}

\phead{Type System} Regular typing rules cannot be overridden in a
sublanguage. Only the overloaded operations container can be overloaded (as their name
suggests) from a sublanguage. As a consequence it requires some thought when
designing a language to make the type system extensible in meaningful ways. 

\phead{Generators} In the case of generators, language designers have to specify
a partial ordering of mapping configurations using priorities. It is not easily possible
to "override" an existing generator, but generators can run \emph{before}
existing ones. Generator extension is not possible directly. This is why we
use the placeholders that are put in by earlier generators to be reduced by
later ones. Obviously, this requires preplanning on the part of the developer of
the generator that adds the placeholder.



\subsection{Real-World use of MPS}

The examples in this paper are toy examples --- the simplest possible languages
to illustrate the composition approaches. However, MPS scales to realistically
sized systems, both in terms of language complexity and in terms of program
size. The composition techniques --- especially those involve syntactic
composition --- are used in practice. We illustrate this with two examples:
embedded software and web applications.



\phead{Embedded Software} Embedded systems are becoming more 
software intensive and the software becomes bigger and more complex. Traditional
embedded system development approaches use a variety of tools for various
aspects of the system, making tool integration a major challenge. Some of the
specific problems of embedded software development include the limited
capability for meaningful abstraction in C, some of C's "dangerous" features
(leading to various coding conventions such as Misra-C \cite{Hatton04}), the
proprietary and closed nature of modeling tools, the integration of models and code,
traceability to requirements, long build times as well as management of product
line variability. The mbeddr project (\footnote{http://mbeddr.com}) addresses
the challenges with a different approach: incremental, modular extension of C with domain-specific language
concepts.  

mbeddr uses extension to add interfaces and components, state machines,
measurement units to C. mbeddr is based on MPS, so users of mbeddr can build
their own extensions. mbeddr implements all of C in less tha 10.000 lines of
language implementation code. Scalability tests have shown that the system
scales to at least 100.000 lines of equivalent C code.

A detailed description, including more details on language and program sizes and
implementation effort can be found in \cite{Voelter2012}.




\phead{Web Development} JetBrains' YouTrack issue tracking system is an
interactive web application with many UI features known from desktop
applications. YouTrack is developed completely with MPS and comprises thousands
of Java classes, web page templates and other artifacts. The effort for building
the necessary MPS-based languages will be repaid by future applications that
build on the same web platform architecture and hence use the same set of
languages. Language extension and composition is used to provide an integrated
web development environment.

For example, the \ic{dnq} language extends Java class definitions with all the
information necessary to persist instances in a database via an
object-relational mapper. This includes real associations (specifying
navigability and composition vs. reference) or length specifications for string
properties. Developers can access these associations just like regular fields.
\emph{dnq} also includes a collections language which supports the manipulation
of collections in a way similar to .NET's Linq \cite{MeijerBB06}. Other
languages include \emph{webr}, a language used for implementing interactions bwetwen the
web page and the backend. It supports a unified programming model for
application logic on the server and on the browser client. \emph{webr} also
provides first-class support for controllers. For example, controllers can
declare actions and attach them directly to events of UI components. \emph{webr}
is well-integrated with \emph{dnq}, so for example, it is possible to use a
persistent entity as a parameter to a page. The database transaction is
automatically managed during request processing.

In email communication with the author, JetBrains reported significant
improvements in developer productivity for web applications. In particular, the
time for new team members to become productive on the Youtrack team is reported
to have been reduced from months to a few weeks, mostly because of the very
tight integration in a single language of the various aspect of web application
development.


\subsection{A unified approach}
\label{facets}

Looking at the \emph{different} mechanisms for extending and overriding
structure, syntax, type system and generators, it is clear that a consistent
approach for addressing all these aspects would be useful. I suggest to model
the approach based on the principles of component-based design
(\cite{0091742}). All language aspects use components as the core structural
building block. Components have types. The type of the component determines the
kinds of facets it has. A facet is a kind of interface that exposes the
(externally visible) ingredients of the component. The kinds of ingredients
depend on the component type: a component of type
\emph{structure} exposes language concepts. A component of type \emph{editor}
exposes editors, type \emph{type system} exposes type system rules, and so on.
Each component type would use a different DSL for implementing the constructs it
exposes. Here is the important point: a component (in a sublanguage) can specify
an \emph{advises} relationship to another component (from a super language).
Then each of the facets can determine which facets from the advised component it
wants to \emph{preempt}, \emph{enhance} or \emph{override}:

\begin{itemize}
  \item \emph{preemption} means that the respective behavior is contributed
  before the behavior from the base language. A generator may use this to reduce a
  construct before the original generator gets a chance to reduce the construct. 
  \item \emph{enhancement} means that the sublanguage component is executed
  after the advised component from the base language. Notice that for declarative aspects
  where ordering is irrelevant, preempt and enhance are exchangable.
  \item \emph{overriding} means that the original facet is completely
  shadowed by the new one. For example, this could be used to
  define a new editor for an existing construct.
\end{itemize}


% \fig{gosi} shows the meta model of the approach.
% \begin{figure}[htp]
% \begin{center}
%   \includegraphics[scale=0.45]{figures/gosi.png}
%   \caption[labelInTOC]{Components contain facets. Facets come in different
%   kinds and the component type determines which facet types are available. The
%   facets export the component's contribution to a language. Facets can
%   declare relations to other facets (preempt, enhance, override) as a generic
%   way to change the contributions exported by components of a base language.}
%   \label{gosi}  
% \end{center}
% \end{figure}

This approach would provide the \emph{same} way of packaging behavior for all
language aspects, as well as a \emph{single} way of changing that behavior in a
sublanguage. To control the granularity at which preemption, enhancement or
overriding is performed, the base language designer would have to group the
structures or behaviors into suitably cut facets. This amount of preplanning is
acceptable: it is just as in object-oriented programming, where behavior that
should be overridable has to be packaged into its own method.
  
The approach could be taken further. Components could be marked as
\emph{abstract}, and define a set of parameters for which values need to be
provided by non-abstract subcomponents. A language is abstract as long as it has
at least one abstract component, for which no concrete subcomponent is provided.
Component parameters could even be usable in structure definitions, for example
as the base concept; this would make a language parametrizable regarding the
base language it extends from.

% In essence, the suggested approach is a bit like object orientation (components
% == classes, facets == methods), with a rich advice framework (as in AOP).
% Component parameters typed to language concepts are similar to generics. Using
% this approach, a powerful and consistent approach to language extensibility
% would be available.


